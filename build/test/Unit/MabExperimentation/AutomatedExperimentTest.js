import { assert } from 'chai';
import 'mocha';
import { AutomatedExperiment } from 'MabExperimentation/Models/AutomatedExperiment';
describe('AutomatedExperimentTest', () => {
    const FooExperimentDeclaration = {
        bar: {
            ACTION1: 'bar1',
            ACTION2: 'bar2'
        },
        baz: {
            ACTION1: 'baz1',
            ACTION2: 'baz2'
        },
        optional: {
            ACTION1: undefined,
            ACTION2: 'defined'
        }
    };
    const FooExperimentDefaultActions = {
        bar: FooExperimentDeclaration.bar.ACTION2,
        baz: FooExperimentDeclaration.baz.ACTION1
    };
    const EndScreenExperiment = new AutomatedExperiment({
        actions: FooExperimentDeclaration,
        defaultActions: FooExperimentDefaultActions,
        cacheDisabled: true
    });
    it('should validate experiment action choices', () => {
        assert.isTrue(EndScreenExperiment.isValid({ bar: 'bar1', baz: 'baz1' }));
        assert.isTrue(EndScreenExperiment.isValid({ bar: 'bar1', baz: 'baz2' }));
        assert.isTrue(EndScreenExperiment.isValid({ bar: 'bar2', baz: 'baz1' }));
        assert.isTrue(EndScreenExperiment.isValid({ bar: 'bar2', baz: 'baz2' }));
        assert.isTrue(EndScreenExperiment.isValid({ bar: 'bar2', baz: 'baz2', optional: 'defined' }));
    });
    it('should fail validation on invalid experiment action choices', () => {
        assert.isFalse(EndScreenExperiment.isValid({}));
        assert.isFalse(EndScreenExperiment.isValid({ bar: 'bar1' }));
        assert.isFalse(EndScreenExperiment.isValid({ baz: 'baz1' }));
        assert.isFalse(EndScreenExperiment.isValid({ baz: 'invalid' }));
        assert.isFalse(EndScreenExperiment.isValid({ someOtherField: 'sad' }));
        assert.isFalse(EndScreenExperiment.isValid({ bar: 'bar1', baz: 'invalid', someOtherField: 'baz1' }));
    });
    it('should validate experiment action choices with extra fields', () => {
        assert.isTrue(EndScreenExperiment.isValid({ bar: 'bar1', baz: 'baz1', extra: 'sad' }));
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0b21hdGVkRXhwZXJpbWVudFRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi90ZXN0L1VuaXQvTWFiRXhwZXJpbWVudGF0aW9uL0F1dG9tYXRlZEV4cGVyaW1lbnRUZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDOUIsT0FBTyxPQUFPLENBQUM7QUFDZixPQUFPLEVBQW1ELG1CQUFtQixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFFckksUUFBUSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtJQUNyQyxNQUFNLHdCQUF3QixHQUEyQjtRQUNyRCxHQUFHLEVBQUU7WUFDRCxPQUFPLEVBQUUsTUFBTTtZQUNmLE9BQU8sRUFBRSxNQUFNO1NBQ2xCO1FBQ0QsR0FBRyxFQUFFO1lBQ0QsT0FBTyxFQUFFLE1BQU07WUFDZixPQUFPLEVBQUUsTUFBTTtTQUNsQjtRQUNELFFBQVEsRUFBRTtZQUNOLE9BQU8sRUFBRSxTQUFTO1lBQ2xCLE9BQU8sRUFBRSxTQUFTO1NBQ3JCO0tBQ0osQ0FBQztJQUVGLE1BQU0sMkJBQTJCLEdBQTRCO1FBQ3pELEdBQUcsRUFBRSx3QkFBd0IsQ0FBQyxHQUFHLENBQUMsT0FBTztRQUN6QyxHQUFHLEVBQUUsd0JBQXdCLENBQUMsR0FBRyxDQUFDLE9BQU87S0FDNUMsQ0FBQztJQUVGLE1BQU0sbUJBQW1CLEdBQUcsSUFBSSxtQkFBbUIsQ0FBQztRQUNoRCxPQUFPLEVBQUUsd0JBQXdCO1FBQ2pDLGNBQWMsRUFBRSwyQkFBMkI7UUFDM0MsYUFBYSxFQUFFLElBQUk7S0FDdEIsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDJDQUEyQyxFQUFFLEdBQUcsRUFBRTtRQUNqRCxNQUFNLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN6RSxNQUFNLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN6RSxNQUFNLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN6RSxNQUFNLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN6RSxNQUFNLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2xHLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDZEQUE2RCxFQUFFLEdBQUcsRUFBRTtRQUNuRSxNQUFNLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztRQUM3RCxNQUFNLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDN0QsTUFBTSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLE1BQU0sQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN2RSxNQUFNLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxjQUFjLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3pHLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDZEQUE2RCxFQUFFLEdBQUcsRUFBRTtRQUNuRSxNQUFNLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzNGLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMifQ==