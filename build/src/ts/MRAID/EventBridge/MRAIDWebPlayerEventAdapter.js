import { MRAIDEventAdapter, MRAIDEvents } from 'MRAID/EventBridge/MRAIDEventAdapter';
import { SDKMetrics, MraidWebplayerMetric } from 'Ads/Utilities/SDKMetrics';
export class MRAIDWebPlayerEventAdapter extends MRAIDEventAdapter {
    constructor(core, handler, container) {
        super(handler);
        this._core = core;
        this._container = container;
        this._mraidHandlers[MRAIDEvents.RESIZE_WEBVIEW] = () => this.handleResizeWebview();
        this._mraidHandlers[MRAIDEvents.ORIENTATION] = (msg) => this.handleSetOrientationProperties(msg[0]);
        this._mraidHandlers[MRAIDEvents.OPEN] = (msg) => this.handleOpen(msg[0]);
        this._mraidHandlers[MRAIDEvents.ANALYTICS_EVENT] = (msg) => this.handleAnalyticsEvent(msg[0], msg[1]);
        this._mraidHandlers[MRAIDEvents.STATE_CHANGE] = (msg) => this.handleCustomState(msg[0]);
        this._mraidHandlers[MRAIDEvents.SEND_STATS] = (msg) => this.handleSendStats(msg[0], msg[1], msg[2]);
    }
    connect() {
        this._webPlayerEventObserver = this._container.onWebPlayerEvent.subscribe((event) => this.onWebPlayerEvent(JSON.parse(event)));
    }
    disconnect() {
        this._container.onWebPlayerEvent.unsubscribe(this._webPlayerEventObserver);
    }
    sendViewableEvent(viewable) {
        this.sendEvent('viewable', [viewable]);
    }
    sendDeviceOrientationEvent(event) {
        this.sendEvent('deviceorientation_unity_v1', [event]);
    }
    onWebPlayerEvent(args) {
        const eventType = args.shift();
        const params = args.shift();
        this._core.Sdk.logDebug(`mraid: event=${eventType}, data=${params}`);
        if (eventType in this._mraidHandlers) {
            const handler = this._mraidHandlers[eventType];
            handler(params);
        }
    }
    sendEvent(event, parameters) {
        const webPlayerParams = [event];
        if (parameters) {
            webPlayerParams.push(parameters);
        }
        return this._container.sendEvent(webPlayerParams);
    }
    handleResizeWebview() {
        this._handler.onBridgeResizeWebview();
    }
    // overriding handleOpen is a temporary addition for this metric
    handleOpen(url) {
        SDKMetrics.reportMetricEvent(MraidWebplayerMetric.MraidClickReceived);
        super.handleOpen(url);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTVJBSURXZWJQbGF5ZXJFdmVudEFkYXB0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvdHMvTVJBSUQvRXZlbnRCcmlkZ2UvTVJBSURXZWJQbGF5ZXJFdmVudEFkYXB0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLGlCQUFpQixFQUErQixXQUFXLEVBQWlCLE1BQU0scUNBQXFDLENBQUM7QUFFakksT0FBTyxFQUFFLFVBQVUsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRTVFLE1BQU0sT0FBTywwQkFBMkIsU0FBUSxpQkFBaUI7SUFLN0QsWUFBWSxJQUFjLEVBQUUsT0FBc0IsRUFBRSxTQUE2QjtRQUM3RSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDZixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztRQUU1QixJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUNuRixJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLDhCQUE4QixDQUE4QixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqSSxJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBUyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqRixJQUFJLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLG9CQUFv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