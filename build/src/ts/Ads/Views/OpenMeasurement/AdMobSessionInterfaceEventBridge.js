import { OMID3pEvents, SessionEvents } from 'Ads/Views/OpenMeasurement/OpenMeasurementDataTypes';
export var OMEvents;
(function (OMEvents) {
    OMEvents["IMPRESSION_OCCURRED"] = "impressionOccurred";
    OMEvents["LOADED"] = "loaded";
    OMEvents["START"] = "start";
    OMEvents["FIRST_QUARTILE"] = "firstQuartile";
    OMEvents["MIDPOINT"] = "midpoint";
    OMEvents["THIRD_QUARTILE"] = "thirdQuartile";
    OMEvents["COMPLETE"] = "complete";
    OMEvents["PAUSE"] = "pause";
    OMEvents["RESUME"] = "resume";
    OMEvents["BUFFER_START"] = "bufferStart";
    OMEvents["BUFFER_FINISH"] = "bufferFinish";
    OMEvents["SKIPPED"] = "skipped";
    OMEvents["VOLUME_CHANGE"] = "volumeChange";
    OMEvents["PLAYER_STATE_CHANGE"] = "playerStateChange";
    OMEvents["AD_USER_INTERACTION"] = "adUserInteraction";
    OMEvents["GEOMETRY_CHANGE"] = "geometryChange";
})(OMEvents || (OMEvents = {}));
export var OMSessionInfo;
(function (OMSessionInfo) {
    OMSessionInfo["SDK_VERSION"] = "sdkVersion";
    OMSessionInfo["SESSION_ID"] = "sessionId";
    OMSessionInfo["VIDEO_ELEMENT"] = "videoElement";
    OMSessionInfo["SLOT_ELEMENT"] = "slotElement";
    OMSessionInfo["ELEMENT_BOUNDS"] = "elementBounds";
})(OMSessionInfo || (OMSessionInfo = {}));
export class AdMobSessionInterfaceEventBridge {
    constructor(core, handler, openMeasurement) {
        this._core = core;
        this._messageListener = (e) => this.onMessage(e);
        this._omidHandlers = {};
        this._handler = handler;
        this._omidHandlers = {};
        this._omidHandlers[OMEvents.IMPRESSION_OCCURRED] = (msg) => this._handler.onImpression(msg.data);
        this._omidHandlers[OMEvents.LOADED] = (msg) => this._handler.onLoaded(msg.data);
        this._omidHandlers[OMEvents.START] = (msg) => this._handler.onStart(msg.data.duration, msg.data.videoPlayerVolume);
        this._omidHandlers[OMEvents.FIRST_QUARTILE] = (msg) => this._handler.onSendFirstQuartile();
        this._omidHandlers[OMEvents.MIDPOINT] = (msg) => this._handler.onSendMidpoint();
        this._omidHandlers[OMEvents.THIRD_QUARTILE] = (msg) => this._handler.onSendThirdQuartile();
        this._omidHandlers[OMEvents.COMPLETE] = (msg) => this._handler.onCompleted();
        this._omidHandlers[OMEvents.PAUSE] = (msg) => this._handler.onPause();
        this._omidHandlers[OMEvents.RESUME] = (msg) => this._handler.onResume();
        this._omidHandlers[OMEvents.BUFFER_START] = (msg) => this._handler.onBufferStart();
        this._omidHandlers[OMEvents.BUFFER_FINISH] = (msg) => this._handler.onBufferFinish();
        this._omidHandlers[OMEvents.SKIPPED] = (msg) => this._handler.onSkipped();
        this._omidHandlers[OMEvents.VOLUME_CHANGE] = (msg) => this._handler.onVolumeChange(msg.data.videoPlayerVolume);
        this._omidHandlers[OMEvents.PLAYER_STATE_CHANGE] = (msg) => this._handler.onPlayerStateChange(msg.data.playerState);
        this._omidHandlers[OMEvents.AD_USER_INTERACTION] = (msg) => this._handler.onAdUserInteraction(msg.data.interactionType);
        this._omidHandlers[SessionEvents.SESSION_START] = (msg) => this._handler.onSessionStart(msg.data);
        this._omidHandlers[SessionEvents.SESSION_FINISH] = (msg) => this._handler.onSessionFinish(msg.data);
        this._omidHandlers[SessionEvents.SESSION_ERROR] = (msg) => this._handler.onSessionError(msg.data);
        this._omidHandlers[OMID3pEvents.VERIFICATION_RESOURCES] = (msg) => this._handler.onInjectVerificationResources(msg.data);
        this._omidHandlers[OMSessionInfo.SDK_VERSION] = (msg) => this.sendSDKVersion(openMeasurement.getSDKVersion());
        this._omidHandlers[OMSessionInfo.SESSION_ID] = (msg) => this.sendSessionId(openMeasurement.getOMAdSessionId());
        this._omidHandlers[OMSessionInfo.VIDEO_ELEMENT] = (msg) => this._handler.onSlotElement(msg.data.videoElement);
        this._omidHandlers[OMSessionInfo.SLOT_ELEMENT] = (msg) => this._handler.onVideoElement(msg.data.slotElement);
        this._omidHandlers[OMSessionInfo.ELEMENT_BOUNDS] = (msg) => this._handler.onElementBounds(msg.data.elementBounds);
    }
    connect() {
        window.addEventListener('message', this._messageListener, false);
    }
    disconnect() {
        window.removeEventListener('message', this._messageListener);
    }
    setAdmobIframe(iframe) {
        this._iframeSessionInterface = iframe;
    }
    sendSDKVersion(sdkVersion) {
        this.postMessage(OMSessionInfo.SDK_VERSION, sdkVersion);
    }
    sendSessionId(sessionId) {
        this.postMessage(OMSessionInfo.SESSION_ID, sessionId);
    }
    sendSessionFinish() {
        this.postMessage(SessionEvents.SESSION_FINISH);
    }
    onMessage(e) {
        const message = e.data;
        if (message.type === 'omid') {
            this._core.Sdk.logInfo(`omid: event=${message.event}, data=${JSON.stringify(message.data)}`);
            if (message.event in this._omidHandlers) {
                const handler = this._omidHandlers[message.event];
                handler(message);
            }
        }
    }
    postMessage(event, data) {
        if (this._iframeSessionInterface && this._iframeSessionInterface.contentWindow) {
            this._iframeSessionInterface.contentWindow.postMessage({
                type: event,
                value: data
            }, '*');
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQWRNb2JTZXNzaW9uSW50ZXJmYWNlRXZlbnRCcmlkZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9zcmMvdHMvQWRzL1ZpZXdzL09wZW5NZWFzdXJlbWVudC9BZE1vYlNlc3Npb25JbnRlcmZhY2VFdmVudEJyaWRnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBaUksTUFBTSxvREFBb0QsQ0FBQztBQUVoTyxNQUFNLENBQU4sSUFBWSxRQWlCWDtBQWpCRCxXQUFZLFFBQVE7SUFDaEIsc0RBQTBDLENBQUE7SUFDMUMsNkJBQWlCLENBQUE7SUFDakIsMkJBQWUsQ0FBQTtJQUNmLDRDQUFnQyxDQUFBO0lBQ2hDLGlDQUFxQixDQUFBO0lBQ3JCLDRDQUFnQyxDQUFBO0lBQ2hDLGlDQUFxQixDQUFBO0lBQ3JCLDJCQUFlLENBQUE7SUFDZiw2QkFBaUIsQ0FBQTtJQUNqQix3Q0FBNEIsQ0FBQTtJQUM1QiwwQ0FBOEIsQ0FBQTtJQUM5QiwrQkFBbUIsQ0FBQTtJQUNuQiwwQ0FBOEIsQ0FBQTtJQUM5QixxREFBeUMsQ0FBQTtJQUN6QyxxREFBeUMsQ0FBQTtJQUN6Qyw4Q0FBa0MsQ0FBQTtBQUN0QyxDQUFDLEVBakJXLFFBQVEsS0FBUixRQUFRLFFBaUJuQjtBQUVELE1BQU0sQ0FBTixJQUFZLGFBTVg7QUFORCxXQUFZLGFBQWE7SUFDckIsMkNBQTBCLENBQUE7SUFDMUIseUNBQXdCLENBQUE7SUFDeEIsK0NBQThCLENBQUE7SUFDOUIsNkNBQTRCLENBQUE7SUFDNUIsaURBQWdDLENBQUE7QUFDcEMsQ0FBQyxFQU5XLGFBQWEsS0FBYixhQUFhLFFBTXhCO0FBaUNELE1BQU0sT0FBTyxnQ0FBZ0M7SUFRekMsWUFBWSxJQUFjLEVBQUUsT0FBcUIsRUFBRSxlQUErQztRQUM5RixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFRLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQWUsQ0FBQyxDQUFDLENBQUM7UUFDdEUsSUFBSSxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFFeEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUM7UUFDeEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQTZCLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3SCxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQTJCLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxRyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQVUsR0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ25JLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFDM0YsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDaEYsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUMzRixJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM3RSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN0RSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN4RSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNuRixJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUNyRixJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUMxRSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQVMsR0FBRyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ3ZILElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQW1CLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdEksSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBa0IsR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUV6SSxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQXlCLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxSCxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQXlCLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1SCxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQXlCLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUUxSCxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLDZCQUE2QixDQUF5QyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFakssSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUM7UUFDOUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQztRQUUvRyxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQWMsR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMzSCxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQWMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMxSCxJQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQWEsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNsSSxDQUFDO0lBRU0sT0FBTztRQUNWLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ3JFLENBQUM7SUFFTSxVQUFVO1FBQ2IsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRU0sY0FBYyxDQUFDLE1BQXlCO1FBQzNDLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxNQUFNLENBQUM7SUFDMUMsQ0FBQztJQUVNLGNBQWMsQ0FBQyxVQUFrQjtRQUNwQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVNLGFBQWEsQ0FBQyxTQUFpQjtRQUNsQyxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQUVNLGlCQUFpQjtRQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRU8sU0FBUyxDQUFDLENBQWU7UUFDN0IsTUFBTSxPQUFPLEdBQWlCLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDckMsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBRTtZQUN6QixJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsZUFBZSxPQUFPLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM3RixJQUFJLE9BQU8sQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtnQkFDckMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ2xELE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUNwQjtTQUNKO0lBQ0wsQ0FBQztJQUVPLFdBQVcsQ0FBQyxLQUFhLEVBQUUsSUFBYztRQUM3QyxJQUFJLElBQUksQ0FBQyx1QkFBdUIsSUFBSSxJQUFJLENBQUMsdUJBQXVCLENBQUMsYUFBYSxFQUFFO1lBQzVFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO2dCQUNuRCxJQUFJLEVBQUUsS0FBSztnQkFDWCxLQUFLLEVBQUUsSUFBSTthQUNkLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDWDtJQUNMLENBQUM7Q0FDSiJ9