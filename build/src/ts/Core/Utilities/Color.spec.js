import { Color } from 'Core/Utilities/Color';
describe('Color Test', () => {
    const toColorTests = [
        {
            hex: '#df80b8',
            expectedColor: new Color(223, 128, 184, 255)
        },
        {
            hex: '#0c36d4',
            expectedColor: new Color(12, 54, 212, 255)
        },
        {
            hex: 'a6ca5c',
            expectedColor: new Color(166, 202, 92, 255)
        },
        {
            hex: '#9d72a9ca',
            expectedColor: new Color(157, 114, 169, 202)
        },
        {
            hex: '6d4488e2',
            expectedColor: new Color(109, 68, 136, 226)
        },
        {
            hex: '789',
            expectedColor: new Color(119, 136, 153, 255)
        },
        {
            hex: '36d4',
            expectedColor: new Color(51, 102, 221, 68)
        },
        {
            hex: '##0c36d4',
            expectedColor: new Color(0, 0, 0, 0)
        },
        {
            hex: '48F4c8x',
            expectedColor: new Color(0, 0, 0, 0)
        },
        {
            hex: undefined,
            expectedColor: new Color(0, 0, 0, 0)
        }
    ];
    toColorTests.forEach((test) => {
        it(`should parse hex: ${test.hex} into expectedColor: ${test.expectedColor}`, () => {
            expect(Color.hexToColor(test.hex)).toStrictEqual(test.expectedColor);
        });
    });
    const toCssRgbaTests = [
        {
            hex: '#df80b8',
            expectedRgba: 'rgba(223, 128, 184, 1)'
        },
        {
            hex: '#0c36d4',
            expectedRgba: 'rgba(12, 54, 212, 1)'
        },
        {
            hex: 'a6ca5c',
            expectedRgba: 'rgba(166, 202, 92, 1)'
        },
        {
            hex: '#9d72a9ca',
            expectedRgba: 'rgba(157, 114, 169, 0.792)'
        },
        {
            hex: '6d4488e2',
            expectedRgba: 'rgba(109, 68, 136, 0.886)'
        },
        {
            hex: '789',
            expectedRgba: 'rgba(119, 136, 153, 1)'
        },
        {
            hex: '36d4',
            expectedRgba: 'rgba(51, 102, 221, 0.267)'
        },
        {
            hex: '##0c36d4',
            expectedRgba: 'rgba(0, 0, 0, 0)'
        },
        {
            hex: '48F4c8x',
            expectedRgba: 'rgba(0, 0, 0, 0)'
        },
        {
            hex: undefined,
            expectedRgba: 'rgba(0, 0, 0, 0)'
        }
    ];
    toCssRgbaTests.forEach((test) => {
        it(`should parse hex: ${test.hex} into expectedRgba: ${test.expectedRgba}`, () => {
            expect(Color.hexToCssRgba(test.hex)).toStrictEqual(test.expectedRgba);
        });
    });
    const lerpTests = [{
            c1: new Color(109, 68, 136, 226),
            c2: new Color(223, 128, 184, 255),
            t: 0.78,
            expectedColor: new Color(198, 115, 173, 249)
        }, {
            c1: new Color(119, 136, 153, 50),
            c2: new Color(51, 102, 221, 68),
            t: 0.5,
            expectedColor: new Color(85, 119, 187, 59)
        }, {
            c1: new Color(157, 114, 169, 202),
            c2: new Color(200, 0, 5, 255),
            t: 0.01,
            expectedColor: new Color(157, 113, 167, 203)
        }];
    lerpTests.forEach((test) => {
        it('should lerp colors correctly', () => {
            const lerpedColor = Color.lerp(test.c1, test.c2, test.t);
            expect(lerpedColor).toStrictEqual(test.expectedColor);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29sb3Iuc3BlYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy90cy9Db3JlL1V0aWxpdGllcy9Db2xvci5zcGVjLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUU3QyxRQUFRLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRTtJQUV4QixNQUFNLFlBQVksR0FHWjtRQUNFO1lBQ0ksR0FBRyxFQUFFLFNBQVM7WUFDZCxhQUFhLEVBQUUsSUFBSSxLQUFLLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO1NBQy9DO1FBQ0Q7WUFDSSxHQUFHLEVBQUUsU0FBUztZQUNkLGFBQWEsRUFBRSxJQUFJLEtBQUssQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7U0FDN0M7UUFDRDtZQUNJLEdBQUcsRUFBRSxRQUFRO1lBQ2IsYUFBYSxFQUFFLElBQUksS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQztTQUM5QztRQUNEO1lBQ0ksR0FBRyxFQUFFLFdBQVc7WUFDaEIsYUFBYSxFQUFFLElBQUksS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztTQUMvQztRQUNEO1lBQ0ksR0FBRyxFQUFFLFVBQVU7WUFDZixhQUFhLEVBQUUsSUFBSSxLQUFLLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO1NBQzlDO1FBQ0Q7WUFDSSxHQUFHLEVBQUUsS0FBSztZQUNWLGFBQWEsRUFBRSxJQUFJLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7U0FDL0M7UUFDRDtZQUNJLEdBQUcsRUFBRSxNQUFNO1lBQ1gsYUFBYSxFQUFFLElBQUksS0FBSyxDQUFD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