export class ARUtil {
    static calculateVideoScale(frameInfo) {
        let videoRect = { x: 0, y: 0, width: frameInfo.videoSize.width, height: frameInfo.videoSize.height };
        videoRect = ARUtil.transformRect(videoRect, ARUtil.invertTransform(frameInfo.transform));
        // Calculate scaling for aspect fill
        const videoAspectRatio = videoRect.width / videoRect.height;
        const drawableAspectRatio = frameInfo.drawableSize.width / frameInfo.drawableSize.height;
        let dstWidth = frameInfo.drawableSize.width;
        let dstHeight = frameInfo.drawableSize.height;
        if (drawableAspectRatio > videoAspectRatio) {
            dstHeight *= drawableAspectRatio * (1 / videoAspectRatio);
        }
        else {
            dstWidth *= (1 / drawableAspectRatio) * videoAspectRatio;
        }
        return {
            scaleX: dstWidth / videoRect.width,
            scaleY: dstHeight / videoRect.height
        };
    }
    static advanceFrameWithScale(api) {
        // Get frame info, calculate scaling and then call advanceFrame
        return api.getFrameInfo().then((frameInfo) => {
            const scale = ARUtil.calculateVideoScale(frameInfo);
            return api.setFrameScaling(scale).then(() => api.advanceFrame().catch((error) => { throw new Error('Cannot set frame scale ' + error); }));
        }).catch((error) => { throw new Error('Cannot get frame info ' + error); });
    }
    static invertTransform(transform) {
        const t = transform;
        const determinant = t.a * t.d - t.b * t.c;
        if (determinant === 0) {
            return transform;
        }
        const invDet = 1 / determinant;
        return {
            a: t.d * invDet,
            b: -t.b * invDet,
            c: -t.c * invDet,
            d: t.a * invDet,
            tx: (t.c * t.ty - t.d * t.tx) * invDet,
            ty: (t.b * t.tx - t.a * t.ty) * invDet
        };
    }
    static transformPoint(point, t) {
        return {
            x: t.a * point.x + t.c * point.y + t.tx,
            y: t.b * point.x + t.d * point.y + t.ty
        };
    }
    static transformRect(rect, t) {
        const top = rect.y;
        const left = rect.x;
        const right = rect.x + rect.width;
        const bottom = rect.y + rect.height;
        const topLeft = ARUtil.transformPoint({ x: left, y: top }, t);
        const topRight = ARUtil.transformPoint({ x: right, y: top }, t);
        const bottomLeft = ARUtil.transformPoint({ x: left, y: bottom }, t);
        const bottomRight = ARUtil.transformPoint({ x: right, y: bottom }, t);
        const minX = Math.min(Math.min(topLeft.x, topRight.x), Math.min(bottomLeft.x, bottomRight.x));
        const maxX = Math.max(Math.max(topLeft.x, topRight.x), Math.max(bottomLeft.x, bottomRight.x));
        const minY = Math.min(Math.min(topLeft.y, topRight.y), Math.min(bottomLeft.y, bottomRight.y));
        const maxY = Math.max(Math.max(topLeft.y, topRight.y), Math.max(bottomLeft.y, bottomRight.y));
        return {
            x: minX, y: minY, width: maxX - minX, height: maxY - minY
        };
    }
    // TODO: Remove /ar/ folder check once we have MRAID-AR type support on the server side
    static isARCreative(campaign) {
        if (campaign.getAdType() && campaign.getAdType() === 'MRAID_AR') {
            return true;
        }
        const resourceUrl = campaign.getResourceUrl();
        if (resourceUrl && resourceUrl.getOriginalUrl().match(/\/ar\/|ducktales-ar/)) {
            return true;
        }
        const arCreatives = ['102044637'];
        let isAR = false;
        arCreatives.forEach(c => {
            if (c === campaign.getCreativeId()) {
                isAR = true;
            }
        });
        return isAR;
    }
    static isARSupported(ar) {
        return ar && ar.AR.Ios ? ar.AR.Ios.isARSupported() :
            ar && ar.AR.Android ? ARUtil.isARSupportedAndroid(ar.AR.Android) :
                Promise.resolve(false);
    }
    static isARSupportedAndroid(api, retry = 1) {
        if (retry > 5) {
            return Promise.resolve(false);
        }
        return api.isARSupported().then(([transient, supported]) => {
            if (!transient) {
                return supported;
            }
            const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));
            return sleep(this.ANDROID_AR_SUPPORTED_RETRY_WAIT).then(() => {
                return ARUtil.isARSupportedAndroid(api, retry + 1);
            });
        });
    }
}
ARUtil.ANDROID_AR_SUPPORTED_RETRY_WAIT = 300;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQVJVdGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL3RzL0FSL1V0aWxpdGllcy9BUlV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkNBLE1BQU0sT0FBTyxNQUFNO0lBR1IsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFNBQXVCO1FBQ3JELElBQUksU0FBUyxHQUFZLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUM5RyxTQUFTLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxTQUFTLEVBQUUsTUFBTSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUV6RixvQ0FBb0M7UUFDcEMsTUFBTSxnQkFBZ0IsR0FBRyxTQUFTLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxNQUFNLENBQUM7UUFDNUQsTUFBTSxtQkFBbUIsR0FBRyxTQUFTLENBQUMsWUFBWSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztRQUV6RixJQUFJLFFBQVEsR0FBRyxTQUFTLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQztRQUM1QyxJQUFJLFNBQVMsR0FBRyxTQUFTLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQztRQUU5QyxJQUFJLG1CQUFtQixHQUFHLGdCQUFnQixFQUFFO1lBQ3hDLFNBQVMsSUFBSSxtQkFBbUIsR0FBRyxDQUFDLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDO1NBQzdEO2FBQU07WUFDSCxRQUFRLElBQUksQ0FBQyxDQUFDLEdBQUcsbUJBQW1CLENBQUMsR0FBRyxnQkFBZ0IsQ0FBQztTQUM1RDtRQUVELE9BQU87WUFDSCxNQUFNLEVBQUUsUUFBUSxHQUFHLFNB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