import { AndroidARApi } from 'AR/Native/Android/AndroidARApi';
import { IosARApi } from 'AR/Native/iOS/IosARApi';
import { EventCategory } from 'Core/Constants/EventCategory';
import { Platform } from 'Core/Constants/Platform';
import { ApiPackage, NativeApi } from 'Core/Native/Bridge/NativeApi';
import { Double } from 'Core/Utilities/Double';
import { Observable0, Observable1, Observable2 } from 'Core/Utilities/Observable';
var AREvent;
(function (AREvent) {
    AREvent[AREvent["AR_PLANES_ADDED"] = 0] = "AR_PLANES_ADDED";
    AREvent[AREvent["AR_PLANES_REMOVED"] = 1] = "AR_PLANES_REMOVED";
    AREvent[AREvent["AR_PLANES_UPDATED"] = 2] = "AR_PLANES_UPDATED";
    AREvent[AREvent["AR_ANCHORS_UPDATED"] = 3] = "AR_ANCHORS_UPDATED";
    AREvent[AREvent["AR_FRAME_UPDATED"] = 4] = "AR_FRAME_UPDATED";
    AREvent[AREvent["AR_WINDOW_RESIZED"] = 5] = "AR_WINDOW_RESIZED";
    AREvent[AREvent["AR_ERROR"] = 6] = "AR_ERROR";
    AREvent[AREvent["AR_SESSION_INTERRUPTED"] = 7] = "AR_SESSION_INTERRUPTED";
    AREvent[AREvent["AR_SESSION_INTERRUPTION_ENDED"] = 8] = "AR_SESSION_INTERRUPTION_ENDED";
})(AREvent || (AREvent = {}));
export class ARApi extends NativeApi {
    constructor(nativeBridge) {
        super(nativeBridge, 'AR', ApiPackage.AR, EventCategory.AR);
        this.onPlanesAdded = new Observable1();
        this.onPlanesRemoved = new Observable1();
        this.onPlanesUpdated = new Observable1();
        this.onAnchorsUpdated = new Observable1();
        this.onFrameUpdated = new Observable1();
        this.onWindowResized = new Observable2();
        this.onError = new Observable1();
        this.onSessionInterrupted = new Observable0();
        this.onSessionInterruptionEnded = new Observable0();
        if (nativeBridge.getPlatform() === Platform.ANDROID) {
            this.Android = new AndroidARApi(nativeBridge);
        }
        else if (nativeBridge.getPlatform() === Platform.IOS) {
            this.Ios = new IosARApi(nativeBridge);
        }
    }
    restartSession(arRunProperties) {
        return this._nativeBridge.invoke(this._fullApiClassName, 'restartSession', [arRunProperties]);
    }
    setDepthFar(depth) {
        return this._nativeBridge.invoke(this._fullApiClassName, 'setDepthFar', [new Double(depth)]);
    }
    setDepthNear(depth) {
        return this._nativeBridge.invoke(this._fullApiClassName, 'setDepthNear', [new Double(depth)]);
    }
    showCameraFeed() {
        return this._nativeBridge.invoke(this._fullApiClassName, 'showCameraFeed');
    }
    hideCameraFeed() {
        return this._nativeBridge.invoke(this._fullApiClassName, 'hideCameraFeed');
    }
    addAnchor(identifier, matrix) {
        return this._nativeBridge.invoke(this._fullApiClassName, 'addAnchor', [identifier, matrix]);
    }
    removeAnchor(identifier) {
        return this._nativeBridge.invoke(this._fullApiClassName, 'removeAnchor', [identifier]);
    }
    getSupportedVideoFormats(configName) {
        return this._nativeBridge.invoke(this._fullApiClassName, 'getSupportedVideoFormats', [configName]);
    }
    handleEvent(event, parameters) {
        switch (event) {
            case AREvent[AREvent.AR_PLANES_ADDED]:
                this.onPlanesAdded.trigger(parameters[0]);
                break;
            case AREvent[AREvent.AR_PLANES_REMOVED]:
                this.onPlanesRemoved.trigger(parameters[0]);
                break;
            case AREvent[AREvent.AR_PLANES_UPDATED]:
                this.onPlanesUpdated.trigger(parameters[0]);
                break;
            case AREvent[AREvent.AR_ANCHORS_UPDATED]:
                this.onAnchorsUpdated.trigger(parameters[0]);
                break;
            case AREvent[AREvent.AR_FRAME_UPDATED]:
                this.onFrameUpdated.trigger(parameters[0]);
                break;
            case AREvent[AREvent.AR_WINDOW_RESIZED]:
                this.onWindowResized.trigger(parameters[0], parameters[1]);
                break;
            case AREvent[AREvent.AR_ERROR]:
                this.onError.trigger(parameters[0]);
                break;
            case AREvent[AREvent.AR_SESSION_INTERRUPTED]:
                this.onSessionInterrupted.trigger();
                break;
            case AREvent[AREvent.AR_SESSION_INTERRUPTION_ENDED]:
                this.onSessionInterruptionEnded.trigger();
                break;
            default:
                super.handleEvent(event, parameters);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQVIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvdHMvQVIvTmF0aXZlL0FSLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFbEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzdELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRXJFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUVsRixJQUFLLE9BVUo7QUFWRCxXQUFLLE9BQU87SUFDUiwyREFBZSxDQUFBO0lBQ2YsK0RBQWlCLENBQUE7SUFDakIsK0RBQWlCLENBQUE7SUFDakIsaUVBQWtCLENBQUE7SUFDbEIsNkRBQWdCLENBQUE7SUFDaEIsK0RBQWlCLENBQUE7SUFDakIsNkNBQVEsQ0FBQTtJQUNSLHlFQUFzQixDQUFBO0lBQ3RCLHVGQUE2QixDQUFBO0FBQ2pDLENBQUMsRUFWSSxPQUFPLEtBQVAsT0FBTyxRQVVYO0FBeUJELE1BQU0sT0FBTyxLQUFNLFNBQVEsU0FBUztJQWNoQyxZQUFZLFlBQTBCO1FBQ2xDLEtBQUssQ0FBQyxZQUFZLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxFQUFFLEVBQUUsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBWC9DLGtCQUFhLEdBQUcsSUFBSSxXQUFXLEVBQVUsQ0FBQztRQUMxQyxvQkFBZSxHQUFHLElBQUksV0FBVyxFQUFVLENBQUM7UUFDNUMsb0JBQWUsR0FBRyxJQUFJLFdB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